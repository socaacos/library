openapi: 3.0.1
info:
  description: Library with authors.
  title: Library
  version: v0
servers:
- url: http://localhost:8080
paths:
  /books:
    get:
      tags:
      - book-controller
      operationId: getBooks
      parameters:
      - name: authorDto
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AuthorDto'
      - name: title
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDto'
    post:
      tags:
      - book-controller
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDto'
  /books/{id}:
    get:
      tags:
      - book-controller
      operationId: getBookById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
    put:
      tags:
      - book-controller
      operationId: updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
    delete:
      tags:
      - book-controller
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /books/search:
    get:
      tags:
      - book-controller
      operationId: searchBooks
      parameters:
      - name: title
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDto'
  /authors:
    get:
      tags:
      - author-controller
      operationId: getAuthors
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorDto'
    post:
      tags:
      - author-controller
      operationId: createAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthorDto'
  /authors/{id}:
    get:
      tags:
      - author-controller
      operationId: getAuthorById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
    put:
      tags:
      - author-controller
      operationId: updateAuthor
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
    delete:
      tags:
      - author-controller
      operationId: deleteAuthor
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /authors/search:
    get:
      tags:
      - author-controller
      operationId: searchAuthors
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorDto'
  /libraries:
    get:
      tags:
      - library-controller
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryDto'
    post:
      tags:
      - library-controller
      operationId: createLibrary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LibraryDto'
  /libraries/{id}:
    get:
      tags:
      - library-controller
      operationId: getById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryDto'
    put:
      tags:
      - library-controller
      operationId: updateLibrary
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryDto'
    delete:
      tags:
      - library-controller
      operationId: deleteCity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /libraries/search:
    get:
      tags:
      - library-controller
      operationId: searchLibraries
      parameters:
      - name: libraryName
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryDto'
  /cities:
    get:
      tags:
      - city-controller
      operationId: getAll_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CityDto'
    post:
      tags:
      - city-controller
      operationId: createCity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CityDto'
  /cities/{id}:
    get:
      tags:
      - city-controller
      operationId: getById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CityDto'
    put:
      tags:
      - city-controller
      operationId: updateCity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CityDto'
    delete:
      tags:
      - city-controller
      operationId: deleteCity_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /cities/search:
    get:
      tags:
      - city-controller
      operationId: searchCities
      parameters:
      - name: cityName
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CityDto'
components:
  schemas:
    BookDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          $ref: '#/components/schemas/AuthorDto'
        publicationYear:
          type: integer
        numPages:
          type: integer
        libraries:
          type: array
          items:
            $ref: '#/components/schemas/LibraryDto'
    AuthorDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    CityDto:
      type: object
      properties:
        id:
          type: integer
        cityName:
          type: string
    LibraryDto:
      type: object
      properties:
        id:
          type: integer
        libraryName:
          type: string
        city:
          $ref: '#/components/schemas/CityDto'
        address:
          type: string
